AN SDN APPROACH FOR EFFICIENT INTERNET BANDWIDTH UTILIZATION IN WIRELESS MESH NETWORKS


ABSTRACT
Wireless Mesh Networks (WMN) have been emerging in the last couple of years as a cost effective alternative to traditional wired access networks. A typical WMN combines a fixed network (backbone) and a mobile network (backhaul). The nodes in a WMN often act as relays, forwarding traffic to or from other mesh nodes, or providing localized connectivity to mobile or pervasive wireless devices, such as 
laptops, desktops and other mobile clients. Some of these nodes, called mesh gates, are directly connected to the Internet and provide Internet access to all other mesh nodes. IEEE 802.11s is the IEEE standard for Wireless Mesh Networks and is present in the Linux kernel in the form of open80211s (o11s). Currently, in o11s, every mesh node is associated with a maximum of one mesh gate. This type of single association directs the entire traffic from a node towards the mesh gate it is associated with. The gate's available bandwidth is shared by all its clients (nodes), and consequently, the throughput per client is reduced with an increase in the number of clients. Additionally, the mesh gate being common to many outbound paths, experiences a reduction in it’s effective link capacity due to the multipoint-to-point nature of the associations. By enabling multipoint-to-multipoint associations, this paper aims to improve the utilization of total available bandwidth by using multiple Internet access gateways inside a Wireless Mesh Network. This is achieved in a transparent manner without requiring any changes to applications. The overall load on the network is balanced across multiple gateways by using a traffic sensitive approach for gateway selection. Conventionally, in wireless networks, associating with multiple gateways requires multiple wireless NICs. Our approach moves away from this convention and uses a single wireless NIC to associate with multiple internet gateways, thereby reducing hardware costs.


o11s
single assoc, single pt of failure
inefficient use of bw
re-routing

INTRODUCTION

Wirless Mesh Networks have seen tremendous growth in the recent years owing to its cost effectiveness due to reduced dependency on wired access networks. The emergence of community mesh, city wide mesh and rural deployments have defined the benefits of Wireless Mesh Networks over the existing wired and other 802.11 based networks. The self-healing and self-organising ability together with the range extension feature makes WMNs have superseded the conventional ad-hoc networks.
 A typical WMN combines a fixed network (backbone) and a mobile network (backhaul). For each WMN, there are mesh stations that implement the mesh facility acting as routers, forwarding traffic to or from other mesh nodes, or providing localised connectivity to stations(STA), devices that contain an IEEE 802.11-conformant medium access control (MAC) and physical layer (PHY) interface to the wireless medium (WM). Some of these routers, called mesh gates are directly connected to the outside network provide access to one or more distribution systems, via the wireless medium for the mesh basic service set (MBSS).
 Open80211s is an open-source implementation of the recently ratified IEEE 802.11s wireless mesh standard. Open80211s became a part of the linux kernel (release 2.6.26) to realize bringing the wireless mesh network on commodity hardware supported by the kernel. It enabled create the first open implementation of 802.11s in order to consolidate the numerous non-interoperable mesh protocols into one that is based on a standard specification (IEEE 802.11s).
 802.11s based networks use the Hybrid Wireless Mesh Protocol (HWMP) for L2 routing based on MAC addresses. HWMP provides both proactive path selection and reactive path selection. A mesh station that needs to transmit a frame to an unknown destination can dynamically discover the best path to this destination. Mesh stations can also proactively discover the MBSS and determine best paths to any point of the mesh cloud before needing to send any data frame. 
 In order to connect to the outside network, the mesh nodes and the stations in the WMNs form layer 3 networks by forming an association with the gateway present in the network. Traditionally the mesh nodes can only be associated with one of the available gateways. This type of single association directs the entire traffic from a node towards the mesh gate it is associated with. The gate's available bandwidth is shared by all its clients (nodes), and consequently, the throughput per client is reduced with an increase in the number of clients. Additionally, the mesh gate being common to many outbound paths, experiences a reduction in it’s effective link capacity due to the multipoint-to-point nature of the associations.
 WMNs are self-healing and self-forming networks. But the Layer 3 associations in which the mesh nodes are bound to only one gateway prevents from taking advantage of this facitity offered by the Layer 2 networks. This means that on failure of a mesh gate, the traffic flowing to the gateway through that mesh gate is dropped instead of being re-routed to any other gateway which can be reachable using the L2 network. 
 In order to overcome these shortcomings, this paper suggests an approach to effectively use the capabilties of 802.11s based wireless mesh networks to improve the utilization of total available bandwidth by using multiple Internet access gateways inside a Wireless Mesh Network. By enabling multipoint-to-multipoint association the overall load on the network is balanced across multiple gateways by using a traffic sensitive approach for gateway selection. The method routes the traffic on flow basis in order to maintain the integrity of the flow and avoid the overhead involved in reassembling the packets in case of TCP based traffic. The suggested approach also moves away from the convention of using multiple radios for throughput enhancement and uses a single wireless NIC to associate with multiple internet gateways, thereby reducing hardware costs.

BACKGROUND AND RELATED WORK
Reference [] presents a survey of wireless mesh networks, it discusses some challenges that need to overcome to leverage the benefits of this technology. It states that to ensure reliable mesh connectivity, network self-organization and topology control algorithms are needed. Most applications of WMNs are broadband services with heterogeneous QoS requirements thus, in addition to end-to-end transmission delay and fairness, more performance metrics, such as delay jitter, aggregate and per-node through-put, and packet loss ratios, must be considered by communication protocols. 

Implementation of Wireless Mesh Networks in the Linux kernel is open80211s. As per the 
implementation, every mesh client is associated with one mesh gate. Hence, all the traffic originating from a particular mesh client is served by the associated mesh gate.  Since all traffic is directed towards the gateway and the gateway has a fixed bandwidth that has to be shared by all its clients, the throughput per client is reduced as the number of client nodes increases. The mesh gate being common to many outbound paths reduce the effective link capacity due to the multipoint-to-point nature of the traffic. In addition, if a mesh gate goes down, all the associated clients lose internet connectivity. As Wireless Mesh Networks are self-healing and self-configuring, there should be a mechanism that will automatically try to associate with other mesh gates available on the network. []

[] approach of using multiple gateways needs multiple radios. Every radio is associated one gateway. Hence, multiple gateways are used by routing different flows of traffic through different gateways. This results in increased hardware cost.

[] use RANN frames in order to get all the gateways present in the Mesh Network. RANN frames can be captured only when we are running in monitor mode as they are layer 2 frames. This leads to receiving lot of traffic from the network. Also, all the frames need to be inspected to filter out the RANN frames. This wastes lot of processing power. The gateway selection process select one default gateway. All the traffic is routed via that gateway. When the default gateway is overloaded then it sends a Change_Pkt request to one of the associated node. The node then selects another gateway as its default gateway which in effect uses a single gateway. 

[] paper discusses optimization of bittorent traffic in Wireless Mesh Networks. This approach uses a central server which communicates with the Bittorrent tracker. Also, there dedicated WMN agents which communicate with the server which in turn communicates with the tracker. This results in an unnecessary overhead and increased costs of maintaining a server.  


IMPLEMENTATION AND PERFORMANCE EVALUATION

Parts of the solution : 
based on open80211s (IEEE 802.11s standard's Linux Kernel implementation)

Advertisement of the gateway in MAC Frame broadcasted
Conventionally in open80211s, the presence of mesh gates is detected by a gate flag in the broadcasted Root Announcement frames. Although this is sufficient for getting to know the MAC address of a gate, it does not provide any information about the gate's Layer3 address. In order to tackle this, in the solution, each gate now sends out a broadcast which contains it's MAC address as well as IP Address, which allows nodes to maintain their IP and ETH mappings for gates in the network.

Multigateway association which is decided by GatewaySelector for every new flow
Every time a mesh node wants to start sending a new stream of data (socket) to a machine outside the local network, it does so via the best possible gate selected on the basis of metrics and the type of information required to be sent. The node has a list of all gateways it can use to serve it's external network needs and decides one accordingly. The gateway annotation on the packets pertaining to this flow are set to the chosen gateway. This flow is now bound to the gateway and will continue until all the data has been transferred.

Flow is identified with source port number
A unique key is required to differentiate different flows from one another. Since a source port on a machine can only be used by one flow at a time, it serves as a unique identifier. Using the source port number, it can be known which flow a particular packet belongs to, thereby respecting the requirement of sending all packets of a specific flow through one gateway.

#Stickiness is defined for pre existing flows so that a new gate coming up does not change the gateway
Addition and removal of gates dynamically
To maintain the dynamic nature of a mesh network, nodes and gates are allowed to leave and join the mesh network. This highlights the self healing and self configuring property of mesh networks.

While the flow of packets are being routed through the specific gateway, more gateways may come up which might provide a better path for the completion of the same request. In such a case, it is important to honour the previous mapping of the source port and the associated gateway as changing gateways will confuse the machine on the other end, which may regard it as a malicious flow of packets. This will result in packet drops at the other end of the socket and therefore needs to be avoided. Hence, a mapping table of which port is bound to which gateway on the local network is maintained. In case the port remains unused for a specific timeout interval, the mapping is then cleared.

In case a gateway goes down, no traffic destined for the outside network should be routed via it. The disppearance of a gate has been accounted for by the missing Layer 2 broadcasts received by the nodes. The nodes wait for a specified time out interval, after which the entry for a non broadcasting gate is removed. In case the gate comes back up, it will start broadcasting frames again and therefore can be used again for servicing requests.

ebtables hook for identical IP addresses
All gates present on the network will have IP addresses associated with them. The gates can be a variety of devices, including but not limited to wired routers, smartphones and USB based dongles. Some vendors do not allow users to change the IP addresses of these devices. In case two or more devices have identical hard coded IP addresses, it leads to IP related conflicts and also disrupts the flow of packets as routing becomes ambiguous. In order to combat this situation, an ARP proxy has been included which allows the assignment of unique IP addresses to machines on the network even if they have identical vendor enforced IP addresses.

Adds L3 routing capabilities to existing L2 routing capabilities
The underlying o11s implementation uses the Hybrid Wireless Mesh Protocol for routing at the Layer 2. While this is sufficient for routing packets in a single association network, it is quickly evident that such a scheme is not feasible if multiple associations are to be exploited. This is mainly due to the insufficient Layer3 information that is present with nodes participating in L2 routing using HWMP. This has been accounted for by making the gates broadcast their own IP addresses. These broadcast messagaes, when received by nodes, help them map IP addresses to ethernet addresses and therefore use the mesh's underlying routing capabilities along with some consideration for the layer above.

Interoperability
The solution has been created with compatibility in mind with the existing o11s. This allows a mix of nodes, both vanilla o11s and the ones based on this solution, to coexist and work without hitches.

ARCHITECTURE DIAGRAM

Experiment
An experiment was carried out to emulate the working of this solution in a real network. It was set up using o11s as the base network. There are four machines involved. A Client C, two gateways G1 and G2, and a server S. The client C cannot directly reach the server S and must communicate via either G1 or G2. Files are stored on the server S and the client C wants to download these files. The link capacities on either sides of both GW1 and GW2 are kept identical and varied from 100 KBPS to 1400 KBPS. Downloads were performed for each value of link speed once with GW1, once with GW2 and ultimately with both GW1 and GW2 simultaneously. 

The graph below was created with experimental readings and it clearly shows  gain in the network when download times are considered. It is evident from the graph that the gains are linear until the underlying hardware becomes a bottleneck. Since high speed devices are not always utilized to the maximum extent, linear gains can be achieved in most of the real world scenarios.

Results
Linear gains (bandwidth adds up) until the underlying hardware link becomes a bottleneck.


CONCLUSION

REFERENCES
